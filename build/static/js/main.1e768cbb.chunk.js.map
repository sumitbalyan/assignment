{"version":3,"sources":["columns.js","types.js","App.js","serviceWorker.js","index.js"],"names":["columns","dataField","text","sort","SheetJSFT","map","x","join","App","_useState","useState","_useState2","Object","slicedToArray","employee","setEmployee","_useState3","_useState4","myfile","setMyFile","react_default","a","createElement","className","style","marginTop","htmlFor","type","id","accept","onChange","e","files","target","onClick","reader","FileReader","rABS","readAsBinaryString","onload","bstr","result","wb","XLSX","read","bookVBA","wsname","SheetNames","ws","Sheets","data","utils","sheet_to_json","readAsArrayBuffer","value","lib_default","striped","hover","keyField","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2QAAaA,EAAU,CACrB,CACEC,UAAW,QACXC,KAAM,MACL,CACDD,UAAW,UACXC,KAAM,OACNC,MAAM,GACL,CACDF,UAAW,cACXC,KAAM,SACNC,MAAM,GACL,CACDF,UAAW,MACXC,KAAM,OACL,CACDD,UAAW,aACXC,KAAM,cACL,CACDD,UAAW,QACXC,KAAM,UCpBGE,EAAY,CAAC,OAAQ,OAAOC,IAAI,SAAUC,GACnD,MAAO,IAAMA,IACdC,KAAK,KC8EOC,MAzEf,WAAe,IAAAC,EAEIC,mBAAS,IAFbC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNK,EADMH,EAAA,GAEXI,EAFWJ,EAAA,GAAAK,EAKEN,mBAAS,IALXO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAINE,EAJMD,EAAA,GAKXE,EALWF,EAAA,GA2Cb,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYC,MAAO,CAChCC,UAAW,KAEXL,EAAAC,EAAAC,cAAA,SAAOI,QAAQ,QAAf,uCAGAN,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SACEK,KAAK,OACLJ,UAAU,2BACVK,GAAG,OACHC,OAAQzB,EACR0B,SAjDN,SAAsBC,GACpB,IAAMC,EAAQD,EAAEE,OAAOD,MACnBA,GAASA,EAAM,IACjBb,EAAUa,EAAM,OA+ChBZ,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SACEK,KAAK,SACLJ,UAAU,kBACVW,QAhDN,WACE,IAAMC,EAAS,IAAIC,WACbC,IAASF,EAAOG,mBAEtBH,EAAOI,OAAS,SAACR,GAEf,IAAMS,EAAOT,EAAEE,OAAOQ,OAChBC,EAAKC,IAAKC,KAAKJ,EAAM,CACzBb,KAAMU,EACF,SACA,QACJQ,SAAS,IAGLC,EAASJ,EAAGK,WAAW,GACvBC,EAAKN,EAAGO,OAAOH,GAEfI,EAAOP,IACVQ,MACAC,cAAcJ,GAEjBjC,EAAYmC,IAGVb,EACFF,EAAOG,mBAAmBpB,GAE1BiB,EAAOkB,kBAAkBnC,IAsBvBoC,MAAM,WACRlC,EAAAC,EAAAC,cAACiC,EAAAlC,EAAD,CACEmC,SAAO,EACPC,OAAK,EACLC,SAAS,QACTR,KAAMpC,EACNd,QAASA,MC/DG2D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACL7C,EAAAC,EAAAC,cAAC4C,EAAD,MAAQC,SAASC,eAAe,SD2H9B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1e768cbb.chunk.js","sourcesContent":["export const columns = [\r\n  {\r\n    dataField: 'empId',\r\n    text: 'ID'\r\n  }, {\r\n    dataField: 'empName',\r\n    text: 'Name',\r\n    sort: true\r\n  }, {\r\n    dataField: 'salary in $',\r\n    text: 'Salary',\r\n    sort: true\r\n  }, {\r\n    dataField: 'Age',\r\n    text: 'Age'\r\n  }, {\r\n    dataField: 'department',\r\n    text: 'Department'\r\n  }, {\r\n    dataField: 'title',\r\n    text: 'Title'\r\n  }\r\n];","export const SheetJSFT = [\"xlsx\", \"xls\"].map(function (x) {\r\n    return \".\" + x;\r\n}).join(\",\");","import React, {useState} from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport XLSX from 'xlsx';\n\nimport {columns} from \"./columns\";\nimport {SheetJSFT} from './types';\n\nfunction App() {\n  const [employee,\n    setEmployee] = useState([]);\n\n  const [myfile,\n    setMyFile] = useState({});\n\n  function handleChange(e) {\n    const files = e.target.files;\n    if (files && files[0]) \n      setMyFile(files[0]);\n    };\n  \n  function handleFile() {\n    const reader = new FileReader();\n    const rABS = !!reader.readAsBinaryString;\n\n    reader.onload = (e) => {\n      /* Parse data */\n      const bstr = e.target.result;\n      const wb = XLSX.read(bstr, {\n        type: rABS\n          ? 'binary'\n          : 'array',\n        bookVBA: true\n      });\n      /* Get first worksheet */\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n      const data = XLSX\n        .utils\n        .sheet_to_json(ws);\n      /* Update state */\n      setEmployee(data);\n    };\n\n    if (rABS) {\n      reader.readAsBinaryString(myfile);\n    } else {\n      reader.readAsArrayBuffer(myfile);\n    };\n  }\n  return (\n    <div className=\"container\" style={{\n      marginTop: 10\n    }}>\n      <label htmlFor=\"file\">\n        Upload an excel to Display in Table\n      </label>\n      <br/>\n      <input\n        type=\"file\"\n        className=\"form-control-file border\"\n        id=\"file\"\n        accept={SheetJSFT}\n        onChange={handleChange}/>\n      <br/>\n      <input\n        type=\"Submit\"\n        className=\"btn btn-primary\"\n        onClick={handleFile}\n        value=\"Submit\"/>\n      <BootstrapTable\n        striped\n        hover\n        keyField='empId'\n        data={employee}\n        columns={columns}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls. Learn\n// more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}